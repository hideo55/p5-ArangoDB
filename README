NAME
    ArangoDB - ArangoDB client for Perl

SYNOPSIS
      use ArangoDB;
  
      my $db = ArangoDB->new(
          host       => 'localhost',
          port       => 8529,
          keep_alive => 1,
          api        => '1.2'
      );
  
      # Find or create collection
      my $foo = $db->('foo');
  
      # Create new document
      $foo->save({ x => 42, y => { a => 1, b => 2, } });
      $foo->save({ x => 1, y => { a => 1, b => 10, } });
      $foo->name('new_name'); # rename the collection
  
      # Create hash index.
      $foo->ensure_hash_index([qw/x y/]);
  
      # Simple query
      my $cursor = $db->('new_name')->by_example({ b => 2 });
      while( my $doc = $cursor->next ){
          # do something
      }
  
      # AQL
      my $cursor2 = $db->query( 
          'FOR u IN users FILTER u.age > @age SORT u.name ASC RETURN u' 
      )->bind( { age => 19 } )->execute();
      my $docs = $cursor2->all;

DESCRIPTION
    This module is an ArangoDB's REST API client for Perl.

    ArangoDB is a universal open-source database with a flexible data model
    for documents, graphs, and key-values.

    More information: <http://www.arangodb.org/>

SUPPORT API VERSION
    This module supports ArangoDB API implementation 1.0, 1.1 and 1.2.

METHODS
  new($options)
    Constructor.

    $options is HASH reference.The attributes of $options are:

    api ArangoDB API version. Now, supports '1.0', '1.1' and '1.2'.

        Default: 1.0

    host
        Hostname or IP address of ArangoDB server.

        Default: localhost

    port
        Port number of ArangoDB server.

        Default: 8529

    timeout
        Seconds of HTTP connection timeout.

        Default: 300

    keep_alive
        If it is true, use HTTP Keep-Alive connection.

        Default: false

    auth_type
        Authentication method. Supporting "Basic" only.

    auth_user
        User name for authentication

    auth_passwd
        Password for authentication

    proxy
        Proxy url for HTTP connection.

    inet_aton
        A callback function to customize name resolution. Takes two
        arguments: ($hostname, $timeout_in_seconds).

        See Furl::HTTP.

  collection($name)
    Get or create a collection based on $name. Returns instance of
    ArangoDB::Collection.

    If the Collection $name does not exist, Create it.

    There is shorthand method for get collection instance.

        my $collection = $db->('collection-name');

  create($name,$options)
    Create new collection. Returns instance of ArangoDB::Collection.

    $options is HASH reference.The attributes of $options are:

    waitForSync
        If true then the data is synchronised to disk before returning from
        a create or update of an document.

        Default: false

    journalSize
        The maximal size of a journal or datafile.

    isSystem
        If true, create a system collection. In this case collection-name
        should start with an underscore.

        Default: false

    type
        [API 1.1 or later]

        Collection type. ArangoDB::DOCUMENT_COLLECTION or
        ArangoDB::EDGE_COLLECTION is avaiable.

        Default: ArangoDB::DOCUMENT_COLLECTION

    isVolatile
        [API 1.2 or later]

        If true then the collection data is kept in-memory only and not made
        persistent.

        Default: false

  create_document_collection($name,$options)
    Create new document collection. instance of ArangoDB::Collection.
    $options is same as create().

  create_edge_collection($name,$options)
    Create new edge collection. instance of ArangoDB::Collection. $options
    is same as create().

  find($name)
    Get a Collection based on $name. Returns instance of
    ArangoDB::Collection.

    If the collection does not exist, returns "undef".

  collections()
    Get all collections. Returns ARRAY reference.

  query($query)
    Get AQL statement handler. Returns instance of ArangoDB::Statement.

        my $sth = $db->query('FOR u IN users FILTER u.age > @age SORT u.name ASC RETURN u');

  document($doc)
    Get documnet in the collection based on $doc. Returns instance of
    ArangoDB::Document.

  edge($edge)
    Get edge in the collection. Returns instance of ArangoDB::Edge.

  index($index_id)
    Returns index object.(ArangoDB::Index::*)

    See:

    *   ArangoDB::Index::Primary

    *   ArangoDB::Index::Hash

    *   ArangoDB::Index::SkipList

    *   ArangoDB::Index::Geo

    *   ArangoDB::Index::CapConstraint

    *   ArangoDB::Index::Fulltext

SEE ALSO
    ArangoDB websie <http://www.arangodb.org/>

DEVELOPMENT
  Repository
    <https://github.com/hideo55/p5-ArangoDB>

AUTHOR
    Hideaki Ohno <hide.o.j55 {at} gmail.com>

LICENSE
    This library is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

